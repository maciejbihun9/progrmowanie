
 * the shape of my program should only reflects the problem that is solving,

 * every generator is an iterator,
 - great way to handle many data items without loading it into a program,
 
 * iterator and generator are called almost the same,
 
 * your classes should be implemented as lazy functions!!!
 
 * reprlib.repr is a utility function to generate abbreviated string representations
 of data structures that can be very large.
 - def __repr__(self):
	return 'Sentence(%s)' % reprlib.repr(self.text)
	
 * check if an object is an iterable:
 - iter(sequence) -> raises TypeError if it is not,

 * it is better to use try: catch: block than just if: else: statement,

 * Objects implementing an __iter__ method returning an iterator are iterable. 
 
 * Sequences are always iterable; so as are objects implementing a __getitem__ method which
takes 0-based indexes. 

 * if a class contains getitem() then is an iterable!!! and we can 
 create iter out of it:
 - iter(instance)
 
 * a class is a iterable when contains next() and iter() methods, but
 iter() function also tracts sequences as an iterables when a class
 behaves like this,
 
 * how to create a good iterator with next and iter:
 - str. 412.
 
 * it is worth to say that an __iter__() returns an object self,

 * if something is an iterable then we can call next(iterable) on it!!!
 
 * create a new independant iterable by invoking an iter on iterable,
 
 * an iterator is a generator,
 
 * an iterator can live without a next() method:
 - this iter method works great without a next()
 - and I can safly call a next method on an iterator from it,
 - def __iter__(self):
	for word in self.words:
		yield word
	return

 * create an iterable:
 - s = "ABC"
 - it = type(s)
 
 * example of using an iterator:
 - calls StopIteration exception when is exhausted,
 >>> s = 'ABC'
>>> it = iter(s) #
>>> while True:
	... try:
	... 	print(next(it)) #
	... except StopIteration: #
	... 	del it #
	... 	break
	
GENERATORS:

 * using generators is just essenstial for managing large datasets!!!
 you can not load all data to a program you have to do it one by one

 * generators are lazy implementations, so this is great to save memory
 and get items on the fly,

 * every method with yield at the end is a generator function,

 * a return keyword produces at the end of a generator
 function a StopIteration Exception, 
 
 * one generator iteration works up to yield method,
 
>>> def gen_AB(): #
... print('start')
... yield 'A' #
... print('continue')
... yield 'B' #
... print('end.')

 * we can create a generator from a generator
>>> res2 = (x*3 for x in gen_AB()) #
>>> res2 #
<generator object <genexpr> at 0x10063c240>
>>> for i in res2: #
... print('-->', i)

 * when using list from generator then we get eagerly computed list items
 
 * builtin generators:
 - never stops until out of memory if list()
 - import itertools
 - iterator = itertools.count(1, .5)
 - item = next(iterator)
 
 * create a generator that consumes another generator:
 >>> gen = itertools.takewhile(lambda n: n < 3, itertools.count(1, .5))
>>> list(gen)
[1, 1.5, 2.0, 2.5]

 * get items only that you want:
 - compressing is on the fly, so the list gets only items that are much needed,
 >>> list(itertools.compress('Aardvark', (1,0,1,1,0,1)))
 ['A', 'r', 'd', 'a']

 * get items only that you want using a function:
 - vowel is an accept function,
 - input an iterable into a function that checks if accept this value,
>>> def vowel(c):
... return c.lower() in 'aeiou'

>>> list(itertools.dropwhile(vowel, 'Aardvark'))
['r', 'd', 'v', 'a', 'r', 'k'] 

 * applies predicate to each item of iterable, yielding the item if predi
cate(item) is truthy; if predicate is None, only truthy items are yielded
>>> list(filter(vowel, 'Aardvark'))
['A', 'a', 'a']

 * same as filter, with the predicate logic negated: yields items whenever
predicate computes falsy
>>> list(itertools.filterfalse(vowel, 'Aardvark'))
['r', 'd', 'v', 'r', 'k']

 * yields items from a slice of it, similar to s[:stop] or
s[start:stop:step] except it can be any iterable, and the operation is
lazy
>>> list(itertools.islice('Aardvark', 4))
['A', 'a', 'r', 'd']
>>> list(itertools.islice('Aardvark', 4, 7))
['v', 'a', 'r']

 * yields items while predicate computes truthy, then stops and no further
checks are made
>>> list(itertools.takewhile(vowel, 'Aardvark'))
['A', 'a']

 * compute sum of all previous elements and one that is on the given position and
 put it in the list of results:
>>> list(itertools.accumulate(sample)) #
[5, 9, 11, 19, 26, 32, 35, 35, 44, 45]

 * running generators - 428:
Running sum.
Running minimum.
Running maximum.
Running product.
Factorials from 1! to 10!. 

 * combine many list into a generator:
 - itertools.chain(list1, list2, ...),

 * create a list of tuples from lists:
 - zip creates a generator that can be used as a function parameters,
 - list(zip(range(10), range(10), range(10), range(10))), 
 
 * create a zipped tuple from for loops over many iterables,
 - list(itertools.product(range(11), range(1,3), ["Maciek"]))
 
 * create combinations and permutations of items in an iterable:
 - >>> list(itertools.combinations('ABC', 2)) #
[('A', 'B'), ('A', 'C'), ('B', 'C')]
>>> list(itertools.combinations_with_replacement('ABC', 2)) #
[('A', 'A'), ('A', 'B'), ('A', 'C'), ('B', 'B'), ('B', 'C'), ('C', 'C')]
>>> list(itertools.permutations('ABC', 2)) #
[('A', 'B'), ('A', 'C'), ('B', 'A'), ('B', 'C'), ('C', 'A'), ('C', 'B')]
>>> list(itertools.product('ABC', repeat=2)) #
[('A', 'A'), ('A', 'B'), ('A', 'C'), ('B', 'A'), ('B', 'B'), ('B', 'C'),
('C', 'A'), ('C', 'B'), ('C', 'C')]

 * group the same items into a seperate lists:
>>> for char, group in itertools.groupby('LLLLAAAGG'): #
... print(char, '->', list(group))
...
L -> ['L', 'L', 'L', 'L']
A -> ['A', 'A',]
G -> ['G', 'G', 'G']

 * group by items length:
>>> animals.sort(key=len) #
>>> animals
['rat', 'bat', 'duck', 'bear', 'lion', 'eagle', 'shark',
'giraffe', 'dolphin']
>>> for length, group in itertools.groupby(animals, len): #
... print(length, '->', list(group))

 * create many iterators from one iterable at once:
>>> list(itertools.tee('ABC'))
[<itertools._tee object at 0x10222abc8>, <itertools._tee object at 0x10222ac08>]
>>> g1, g2 = itertools.tee('ABC') 
 
 * return true if all of item in a iterable are true(not zero):
 - all(list)
 - all([1, 0, 12]) -> False 
 
 * return true if any of item in a iterable are true(not zero):
 - any(list)	
 - any([1,1,0]) -> true