import { Subject }    from 'rxjs/Subject';

private searchTerms = new Subject<string>();

search(term: string): void {
  // emit a new value to subscribers
  this.searchTerms.next(term);
}

<input #searchBox id="search-box" (keyup)="search(searchBox.value)" />

 * describe how frequently search for an item:
 - this.heroes$ = this.searchTerms.pipe(
      // wait 300ms after each keystroke before considering the term
      debounceTime(300),

      // ignore new term if same as previous term
      distinctUntilChanged(),

      // switch to new search observable each time the term changes
      switchMap((term: string) => this.heroService.searchHeroes(term)),
    );
 - switchMap() preserves the original request order while
 returning only the observable from the most recent HTTP method call.
 Results from prior calls are canceled and discarded.


 * declare html that creates items out of observable:
  - heroes$ - is a convention to declare an observable list,
  - async indicates that this subscribe automatically,
  - <li *ngFor="let hero of heroes$ | async" >