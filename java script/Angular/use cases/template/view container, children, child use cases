ViewChildren decorator (many):

 * it is used to make a reference to a list of angular components (list),

 * we can start using it in ngAfterViewInit() function,

 * we can subscribe to changes of this list,

 * @ViewChildren - will return all components from the host view,
 
 * @ViewChildren(EmployeeComponent) employers: QueryList<EmployeeComponent>,

 examples:
 * we can also get an item with specified id:
 - <div #div>
	this is a div element
   </div>
 - @ViewChildren("div") div: QueryList<any>;
 
ViewChild (one):

 * it allows us to manipulate other components instances variables,

 * is used to reference a single angular component or simple html element in the component body
 - always takes the first item of the page

 * creates a connection between view and component(directive),
 
 * View queries are set before the ngAfterViewInit callback is called
 
 * we can call this component methods from this,

 * This means that queries done using @ViewChild can only see elements inside the template of the component itself,
 so children of this injected component are not visible,

 * cannot see the internals of its child components.
 
 examples:
 * @ViewChild(EmployeeComponent) firstEmp: EmployeeComponent;

 * get component html method:
 - <component-name #component-id></component-name>
 - @ViewChild('component-id') componentName: ComponentName;

 * get directives used in component:
 - <input matInput #primaryInput [(colorPicker)]="primary" [(ngModel)]="primary"/>
 - @ViewChild('primaryInput', {read: ColorPickerDirective})
     colorPicker: ColorPickerDirective;

 * create a connection between a html item and js code:
 - <table [ngClass]="tableClasses" #row_item>
 - @ViewChild('row_item') rowItem: ElementRef;

 * we can get many item that are declared in html code by referencing only host one
 and just get one property from that html item

 * @ViewChild('tpl') tpl;
 - this is an example of connection between native element with an id and a view,
 - this is an ElementRef instance that contains all java script Element fields and methods,
 
ViewContainerRef:

 * this is a simple reference to html code of the host component

 * once injected into a component refers to a template of this component,
 - this can add new templates to this view, where was declared,

 * creates new components dynamically,

 * referencing this ViewContainerRef causes that we will add components
 as a siblings of this component, so components added using that reference won't be
 part of this component,
 
 * zastosowanie:
 - constructor() {}
 - get number of embedded items: private _vcr: ViewContainerRef
 this._vcr.length;

ContentChildren:

 * use it when inject components into another component:
 - @ContentChildren automatically detects all elements included in other html elements
 - export class App3Component implements AfterContentInit {
     @ContentChildren(App2Component) appComps: QueryList<App2Component>;
     ngAfterContentInit(): void {
       console.log('Number of items in the app.componet.ts');
       console.log(this.appComps.length);
       this.appComps.forEach(item => {
         console.log(item);
       });
     }
   }

  - <app-root3>
      <app-root2></app-root2>
      <app-root2></app-root2>
      <app-root2></app-root2>
    </app-root3>

 * this approach won't work with normal situations

ContentChild:

 * Any element which is located inside the template, is ContnetChild,

