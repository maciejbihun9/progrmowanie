SALES_ANALITICS_CLIENT:

 services:
 * do not subscribe in services this is a bad practice,

 * we can move all services to folder with shared components,
 * service can contain a model class as an interface (eg. UserService contains User Interface with defined fields)
 - we can skip here additional files,

 model classes:
 * we have in shared folder models folder:
 - there we can find models that we use in app,
 but models are also declared only in service modules,

 * I can see that model classes are declared as interfaces,

 * sometimes model classes are declared in service modules and other times
 are declared in seperate in different modules, files,

 environment folder:
 * we can add there urls that we use in our project, that tells us from where we
 are getting the data,

 * urls that tells from where the data becomes is called api urls,

 * it is good idea to move all api urls to one file and then get them from there

 directives:
 * we can define many directives in one file

 + use cases:
 * stylowanie elementów html, [ngStyle], albo nasze dyrektywy, które mają
 deskryptywne nazwy,

 * wydaje mi się, że kod odpowiedzialny za obsługę elementów html powinien być tylko
 w kodzie ts, a nie jako part html, bo wtedy kod html jest o wiele bardziej przenośny.
 Można tylko podmienić funkcje w kodzie html i wwszystko działa pod inną maską.
 Dodanie tam tylko i wyłącznie innego silnika,

 * pojawianie się i znikanie elemntów komponentów:
 - <div *ngIf="inputRegion.expanded">

 security issues:
 * in corporate world we can get a current user just going under specified url:
 - http://c4w30806.itcs.hpecorp.net:4000/api/user

 --------------------------------------------------------------------------------------------

 * communication between components is done using Subjects() and observables
 - in some other component we can create a component and call propagateUpdatedRegions() function with a value
 UpdatedRegions is an output event that can be emitted from this component.
 This is a way of calling functions from other components in the contents of others.

 This is an example of putting a new message to a subject and receiving this message using an Event emmiter
 not simple subscription.

 I can add a new message to a subject()
 - <app-regions-filter-node
       (AddRegionIDChanged)="handleAddedRegionID($event)"
       (RemoveRegionIDChanged)="handleRemoveRegionID($event)"
       (UpdatedRegions)="propagateUpdatedRegions($event)"
         [inputRegion]="regionFilter"></app-regions-filter-node>

 creating templates:
 *


