
 * All HttpClient methods return an RxJS Observable of something.
 
 * Http methods return one value:
 - Observable<Hero[]> returns one value, an array of values

 * we start working with an http client with this:
 - constructor(
    private http: HttpClient,
    private messageService: MessageService) { }
	
 * to update the data in the database we use put method:
 - http.put 

 * create simulated server:
 - add to app.module imports
 - HttpClientInMemoryWebApiModule.forRoot(
      InMemoryDataService, { dataEncapsulation: false }
    )
 - create InMemoryDataService and add there:
 - export class InMemoryDataService implements InMemoryDbService {
  createDb() {
    const heroes = [
      { id: 11, name: 'Mr. Nice' },
      { id: 12, name: 'Narco' },
      { id: 13, name: 'Bombasto' },
      { id: 14, name: 'Celeritas' },
      { id: 15, name: 'Magneta' },
      { id: 16, name: 'RubberMan' },
      { id: 17, name: 'Dynama' },
      { id: 18, name: 'Dr IQ' },
      { id: 19, name: 'Magma' },
      { id: 20, name: 'Tornado' }
    ];
    return {heroes};
  }
}

 * the tap() method does not do much, I tried to return limited number of values but couldn't do it!.
 - I think that this a simple way for logging shit to the console.
	
 * get the data from given url:
 - the get() method returns data in JSON format, so we have
 to know the type, so then we know to which type we want to parse our data,
 - this.http.get<Hero[]>(this.heroesUrl) 
 
 - with this, even if an error occures, application would work,
 - tap() method gets the data from 
 - this.http.get<Hero[]>(this.heroesUrl)
      .pipe(
        tap(heroes => this.log(`fetched heroes`)),
        catchError(this.handleError('getHeroes', []))
      );
	  