
 * An Observable is a lazily evaluated computation that
 can synchronously or asynchronously return zero to (potentially)
 infinite values from the time it's invoked onwards.
 
 * they are the most usefull in angular services, because we can
 register many independent observables that get the data from the server
 and pipes them thorough with some additional modifications,

 * pipe() can be invoked directly on Observable
 - each 1 sec call this Observable and return new Date() instead returned value
 - this.timeSub = Observable
         .interval(1000)
         .map(val => new Date())

 * can be used for http calls, so only for one call and also for subscribing for many values,
 
 * we can call an observable many times, those are separate calls to the backend
 - are lazy and does not have shared execution scope, they are independent
 
 * Subscribing to an Observable is analogous to calling a Function.
 
 * they are not event emitters,
 
 * Observables are able to deliver values either synchronously or asynchronously,
 so code can be blocked until response comes in, or move forward and run on seperate thread

 * What is the difference between an Observable and a function?
 -  Observables can "return" multiple values over time, 

 * we can convert the data or events into observables to subscribe to them,
 - Observable.from([12, 1,3]),
 - Observable.of(12, 1,3)
 
 * instead of create() we usually use those items to create it:
 - of, from, interval
 
 * the way of creating observables for many receivers with totally different scopes:
 - observable.subscribe(x => console.log(x));
 
 * pushes the values 1, 2, 3 immediately (synchronously) when subscribed, 
 and the value 4 after one second:
 - btw. this is the recommended way for creating observables, 
 - but this is the way of creating an observable for given observer,
 it can not be used for many observers,
 - those elements are pushed to subscribers,
 - so those subscribers receive those values after they are available,
 - the subscribe content will be invoked 4 times
 - var observable = Rx.Observable.create(function (observer) {
  observer.next(1);
  observer.next(2);
  observer.next(3);
  setTimeout(() => {
    observer.next(4);
    observer.complete();
  }, 1000);
});

 * an observable can deliver those values:
 There are three types of values an Observable Execution can deliver:

 - "Next" notification: sends a value such as a Number, a String, an Object, etc.
 delivers the data,
 - "Error" notification: sends a JavaScript Error or exception.
 - "Complete" notification: does not send a value. - this is just a indication

 * in subscribe we can set which method we want to serve
 after we get the response,
 - console.log('just before subscribe');
observable.subscribe({
  next: x => console.log('got value ' + x),
  error: err => console.error('something wrong occurred: ' + err),
  complete: () => console.log('done'),
});
console.log('just after subscribe');

 * we can unsubscribe our subscription and this will prevent from 
 executing items in the future,
 - // this object represents the execution of our subscribe method,
    var subscription = this.observable.subscribe(
      data => console.log("data item : " + data),
      error => console.log("give me an information about the errors: " + error),
    );
    subscription.unsubscribe();