
 * w java 8 mo¿liwe jest przekazanie jako parametr metody konkretnej klasy

 * to jest taki shortcut dla zajebiœcie krótkich funkcji!, czyli nie do wielolinijkowych,
tylko do jednolinjkowych 

 * moim zdaniem troche zaciemnia sytuacje, ale do krótkich funkcji mo¿na tego u¿yæ,

 * jest to œwietne rozwi¹zanie do tworzenia sortowania obiektów


 - (Apple p) -> {p.getWeight()} - mo¿na zast¹piæ Apple::getWeight
 - nawiasy nie s¹ potrzebne do metoda nie zostaje wywo³ana.

 * umo¿liwia to pisanie mniejszej iloœci kodu, ale mo¿na to wykorzystaæ tylko dla jendej metody

 * przyk³ady;
 - (args) -> ClassName.staticMethod(args) mo¿na zamieniæ na ClassName::staticMethod
 - wiadomo tutaj, ¿e ta metoda bêdzie przyjmowa³a tylko jeden parametr, ale jest to klasa
   statyczna wiêc trzeba by³o wykazaæ jak to wygl¹da.

 - (arg0, rest) -> arg0.instanceMethod(rest) mo¿na zamieniæ na ClassName::instanceMethod.
 - przyk³ad wywo³ywania metody z argumentu, gdzie drugi jest parametrem metody.

 - () -> new Apple() mo¿na zamieniæ na Apple::new;

 * utworzenie obiektu Apple poprzez podanie parametru konstruktora
 - Function<integer, Apple> createApple = Apple::new  =  (weight) -> new Apple(weight);
 - Apple a = createApple.apply(110)

 * tworzenie obiektu dla ka¿dego elementu listy:
List<Integer> weights = Arrays.asList(2,3,1,4);
List<Apple> apples = map(weights, Apple:new);

public static List<Apple> map(List<Integer> list, Function<Integer, Apple> f){
	List<Apple> result = new ArrayList<>();
	for(Integer e: list){
		result.add(f.apply(e));
	}
	return result;
}
 