
 * sometimes you can create classes that contains objects undeletable!:
 - this is a perfect example of memeory leak,
 - when stack is getting smaller then you can not remove already created objects
 because that array contains references to them,
 public class Stack {
	private Object[] elements;
	private int size = 0;
	private static final int DEFAULT_INITIAL_CAPACITY = 16;
	public Stack() {
		elements = new Object[DEFAULT_INITIAL_CAPACITY];
	}
	public void push(Object e) {
		ensureCapacity();
		elements[size++] = e;
	}
	public Object pop() {
		if (size == 0)
			throw new EmptyStackException();
		return elements[--size];
	}
	/**
	* Ensure space for at least one more element, roughly
	* doubling the capacity each time the array needs to grow.
	*/
	private void ensureCapacity() {
		if (elements.length == size)
			elements = Arrays.copyOf(elements, 2 * size + 1);
	}
 }
 - the perfect replacement is:
 public Object pop() {
	if (size == 0)
		throw new EmptyStackException();
	Object result = elements[--size];
	elements[size] = null; // Eliminate obsolete reference
	return result;
 }
 
 * memory leaks sources:
 - caches (use WeakHashMap),
 - listeners, callbacks,
 
 * use weak references for cahces, because that allows GC to remove them when there is no
 free memory out there
 
 * never use finalizers!!!