
 * serialization causes creating of a new object

 * we have to make sure that we extends a class that has a no-parameter constructor,
 without that we can not serialize correctly,

 * static fields are not serializable,

 * make a field not serializeable:
 - transient public String item;

 * once serialization has been completed, serialized data can be transmitted
 from one place to another, from one vm to another,
 
 * once you allow programmers to use it the nyou have to allow them
 to do so in next relesaes also,
 
 * it is possible to have a bug like deserializing classes with
 a newer version of it,
 
 * A second cost of implementing Serializable is that it increases the likelihood
 of bugs and security holes.
 
 * deserialization is a “hidden constructor”,
 
 * Relying on the default deserialization mechanism can easily
leave objects open to invariant corruption and illegal access
 
 * it should be tested if a class can be serialized in the older version,
 and vice versa,
 
 * the decision about serializng can not be made ligtly.
 there has to be a lot of work to think about it,
 
 * classes for inheritance should not implement Serializable,
 
 * Every serializable class has a unique identification number associated with
it. If you do not specify this number explicitly by declaring a static final long field
named serialVersionUID, the system automatically generates it at runtime by
applying a complex procedure to the class,
- for now i think this solution is better just because it allows jvm
to create a new version each time class is changed,

 * The automatically generated value is
affected by the class’s name, the names of the interfaces it implements, and all of
its public and protected members,

 * Inner classes (Item 22) should not implement Serializable.

 zastosowanie:
 * httpServlet can be serialized, so session state can be stored in cache,

 * Component implements Serializable so GUIs can be sent, saved, and restored,
 
 * Throwable implements Serializable so exceptions from remote method invocation (RMI),
 
 * usefull example of using serializable interface:
 - nice example is on 316 page, how to create a class
 for great serialization,
 - // Serializable subclass of nonserializable stateful class
public class Foo extends AbstractFoo implements Serializable {
	private void readObject(ObjectInputStream s)
			throws IOException, ClassNotFoundException {
		s.defaultReadObject();
		// Manually deserialize and initialize superclass state
		int x = s.readInt();
		int y = s.readInt();
		initialize(x, y);
	}
	
	private void writeObject(ObjectOutputStream s) throws IOException {
			s.defaultWriteObject();
			// Manually serialize superclass state
			s.writeInt(getX());
			s.writeInt(getY());
		}
		// Constructor does not use the fancy mechanism
		public Foo(int x, int y) { super(x, y); }
		private static final long serialVersionUID = 1856835860954L;
}
	
	