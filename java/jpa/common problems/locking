
 * lock entities in transaction
 - those entities will be locked and no other transaction will be available to change those
 - entityManager.find(Department.class, 1, LockModeType.PESSIMISTIC_READ);

 - Department department = entityManager.find(Department.class, 1);
   entityManager.lock(department, LockModeType.PESSIMISTIC_READ);

 * optimistic locking:
 - In every transaction in which an entity object is modified its version number is automatically increased by one.
  Version numbers are managed internally but can be exposed by defining a version field,
   so version field is not really needed for this thing to work correctly.
 - this is the default lock,
 - we are really looking for changes made by other entityManagers,
 - the version number is checked during each commit() and flush() method call,
  (anyway it should be declared, because it is required by some other JPA providers),
 - Optimistic locking should be the first choice for most applications,
 since compared to pessimistic locking it is easier to use and more efficient.
 - so actually it is not really locking,
 - if some other transaction change this entity during this transaction then an exception will be thrown,
 and transaction will rollback
 - entityManager.find(Department.class, 1, LockModeType.OPTIMISTIC);

 * pesimistic locking:
 - it fails when PESSIMISTIC_LOCK is already acquired by other user, and throws LockTimeoutException,
 - If both lockMode1 and lockMode2 are PESSIMISTIC_READ - these lock requests should succeed.
 Any other combination of pessimistic lock modes, which also includes PESSIMISTIC_WRITE, will cause a LockTimeoutException (on the second lock request),
 - Pessimistic locks are automatically released at transaction end (using either commit or rollback),
 - conflicts are detected much earlier that in an optimistic locking,
 - it will lock entire entity in the database, so even read operation made by other transaction will be locked
 until some other transaction frees an entity,
 - it is practical when optimistic locking becomes impractical with too many exceptions
 and too many concurrent transactions,
 - entityManager.find(Department.class, 1, LockModeType.PESSIMISTIC_WRITE);

 set enough time to wait for a lock:
 - em.setProperty("javax.persistence.lock.timeout", 4000);