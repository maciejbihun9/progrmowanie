
 * for this kind of tasks it is good to use latches,

 use cases:
 * start threads in the same time after some start operations:
 - call await() method in all threads that you plan to latch

 * waiter waiting before reaching specific amount of operations:
 - CountDownLatch latch = new CountDownLatch(3);

   // waiter thread waits until latches reaches number 0
   Waiter waiter      = new Waiter(latch);
   Decrementer decrementer = new Decrementer(latch);

   new Thread(waiter)     .start();
   new Thread(decrementer).start();

   Thread.sleep(4000);
   public class Waiter implements Runnable{

       CountDownLatch latch = null;

       public Waiter(CountDownLatch latch) {
           this.latch = latch;
       }

       public void run() {
           try {
               latch.await();
           } catch (InterruptedException e) {
               e.printStackTrace();
           }

           System.out.println("Waiter Released");
       }
   }

   public class Decrementer implements Runnable {

       CountDownLatch latch = null;

       public Decrementer(CountDownLatch latch) {
           this.latch = latch;
       }

       public void run() {

           try {
               Thread.sleep(1000);
               this.latch.countDown();

               Thread.sleep(1000);
               this.latch.countDown();

               Thread.sleep(1000);
               this.latch.countDown();
           } catch (InterruptedException e) {
               e.printStackTrace();
           }
       }
   }