
 * apply different behaviour for each subscription:
 - AtomicInteger ai = new AtomicInteger();
   Function<Flux<String>, Flux<String>> filterAndMap = f -> {
       if (ai.incrementAndGet() == 1) {
           return f.filter(color -> !color.equals("orange"))
                   .map(String::toUpperCase);
       }
       return f.filter(color -> !color.equals("purple"))
               .map(String::toUpperCase);
   };

   Flux<String> composedFlux =
           Flux.fromIterable(Arrays.asList("blue", "green", "orange", "purple"))
           // this method allows changing a flux for each subscription
                   .compose(filterAndMap);

   composedFlux.subscribe(d -> System.out.println("Subscriber 1 to Composed MapAndFilter:"+d));
   composedFlux.subscribe(d -> System.out.println("Subscriber 2 to Composed MapAndFilter: "+d));