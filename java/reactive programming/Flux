
 worth to know:

 * is asynchronous, so we return a flux right away and we wait for response in subscribe section,

 * optionally terminated by either a completion signal or an error,

 * A flux contains three downstream subscriber's methods:
 - onNext(), onComplete(), onError(),

 * Flux produces values only when a subscriber is attached!!! - very important,

 * this is a reactive stream, sequence of items,

 implementation:

 * Flux.push:
 - for processing events from a single producer,
 - it is very similar to create method,+
 - only producing thread can call next, complete, error

 * Flux.generate:
 - for programmatic creation of a stream,
 - we can use previous values from a stream to produce another ones,
 - we can create a flux depending on some conditions or values,

 * Flux.create:
 - to bridge an async event listener with a Flux,
 - here you can define how your backpressure should behave,
 BUFFER - buffer all signals if receiver can not keep up, but
 this may lead to a OutOfMemorryError

 * Flux.create:
 - can bridge async API's,
 - we can register an event listener that when gets event is able to send that event
 to the stream and to subscribers,
 - we can set a downstream event receiver strategy that tells what to do when there
 is too many incoming items (BUFFER - this is a default strategy, that leads to OutOfmemoryErro),
 - Mono will serve only one event and then will drop all others,
 - when we use create() or push() then we like use push/poll policy, so when we subscribe
 then this is like we poll for items, if on the publisher side are already items to be send
 then we poll for that and we receive them
 this happens when we call onRequest() on a sink object,
 later when other items comes to us we use simple next() method to serve that

 * Flux.push:
 - processing events from a single producer,
 - also is able to handle backpressure strategies,
 - only one producing thread amy invoke next, complete, error methods,
 - use onDispose() when you are done with sending items, because this is a lifecycle method
 that is invoked and allows us to handle closing streams,

 * Flux.just(item1, item2, item3, item4, item5).handle:
 - this method allows to eliminate specific items from being sent
 to subscribers,
 - eliminate all integers that does not exist in ASCII
 Flux<String> alphabet = Flux.just(-1, 30, 13, 9, 20)
                 .handle((i, sink) -> {
                     String letter = alphabet(i);
                     if (letter != null)
                         sink.next(letter);
                 });

 use cases:

 * emit infinite sequence of items:
 - Flux.interval(Duration) - emits regular ticks from a clock,

 * create a flux in a programmatic way:
 - this flux items depends on previous values,
 - flux is generated until we reach our if statement
 - Flux<String> flux = Flux.generate(
                   AtomicLong::new,
                   (state, sink) -> {
                       long i = state.getAndIncrement();
                       // this is what we push to a stream
                       sink.next("3 x " + i + " = " + 3*i);
                       if (i == 10) sink.complete();
                       return state;
                   });

 * create a flux where you can apply a function to each element
 and push that item to a sink (to a subscriber):
 - Flux<String> alphabet = Flux.just(-1, 30, 13, 9, 20)
       .handle((i, sink) -> {
           String letter = alphabet(i);
           if (letter != null)
               sink.next(letter);
       });

   alphabet.subscribe(System.out::println);

 * register an event listener in the flux and push an event from
 that event listener to the flux stream to subscribers whenever happens,
 - a user clicks a button and after each click we send a data to all subscribers,
 - Flux<String> bridge = Flux.create(sink -> {
       myEventProcessor.register(
         new MyEventListener<String>() {

           public void onDataChunk(List<String> chunk) {
             for(String s : chunk) {
               sink.next(s);
             }
           }

           public void processComplete() {
               sink.complete();
           }
       });
   });

 * when subscribe, get items from a history if are available, but
 leave also an opportunity to receive those new ones
 - Flux<String> bridge = Flux.create(sink -> {
       myMessageProcessor.register(
         new MyMessageListener<String>() {

           public void onMessage(List<String> messages) {
             for(String s : messages) {
               sink.next(s);
             }
           }
       });
       sink.onRequest(n -> {
           List<String> messages = myMessageProcessor.getHistory(n);
           for(String s : message) {
              sink.next(s);
           }
       });
   });

 * it can trigger multithreaded events in the callback,

